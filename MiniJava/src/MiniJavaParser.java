/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
import syntaxtree.*;
import visitor.*;

public class MiniJavaParser implements MiniJavaParserConstants {

  static final public Program program() throws ParseException {
  MainClass m; ClassDeclList cl;
    m = mainClass();
    cl = classDeclL();
    {if (true) return new Program(m, cl);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass mainClass() throws ParseException {
 Token a; Token b; Statement s;
    jj_consume_token(CLASS);
    a = jj_consume_token(ID);
    jj_consume_token(35);
    jj_consume_token(MAIN);
    jj_consume_token(36);
    jj_consume_token(STRING);
    jj_consume_token(37);
    b = jj_consume_token(ID);
    jj_consume_token(38);
    jj_consume_token(35);
    s = statement();
    jj_consume_token(39);
    jj_consume_token(39);
    {if (true) return new MainClass(new Identifier(a.toString()), new Identifier(b.toString()), s);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDeclList classDeclL() throws ParseException {
 ClassDecl cd; ClassDeclList cdl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      cd = classDecl();
      cdl = classDeclL();
    cdl.addElement(cd); {if (true) return cdl;}
      break;
    default:
      jj_la1[0] = jj_gen;
    {if (true) return new ClassDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl classDecl() throws ParseException {
  Token a; Token b; VarDeclList vl; MethodDeclList ml;
    jj_consume_token(CLASS);
    a = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      vl = varDeclL();
      ml = methodDeclL();
      jj_consume_token(39);
       {if (true) return new ClassDeclSimple(new Identifier(a.toString()), vl, ml );}
      break;
    case EXTENDS:
      jj_consume_token(EXTENDS);
      b = jj_consume_token(ID);
      jj_consume_token(35);
      vl = varDeclL();
      ml = methodDeclL();
      jj_consume_token(39);
       {if (true) return new ClassDeclExtends(new Identifier(a.toString()), new Identifier(b.toString()), vl,ml );}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl varDecl() throws ParseException {
  Type t; Token a;
    t = type();
    a = jj_consume_token(ID);
    jj_consume_token(40);
   {if (true) return new VarDecl(t,new Identifier( a.toString() ) );}
    throw new Error("Missing return statement in function");
  }

  static final public VarDeclList varDeclL() throws ParseException {
 VarDecl vd; VarDeclList vdl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case INT_ARRAY:
    case ID:
      vd = varDecl();
      vdl = varDeclL();
         vdl.addElement(vd); {if (true) return vdl;}
      break;
    default:
      jj_la1[2] = jj_gen;
   {if (true) return new VarDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl methodDecl() throws ParseException {
 Type t; Token a; FormalList fl; VarDeclList vl; StatementList sl; Exp e;
    jj_consume_token(PUBLIC);
    t = type();
    a = jj_consume_token(ID);
    jj_consume_token(36);
    fl = formalL();
    jj_consume_token(38);
    jj_consume_token(35);
    vl = varDeclL();
    sl = statementL();
    jj_consume_token(RETURN);
    e = exp();
    jj_consume_token(40);
    jj_consume_token(39);
    {if (true) return new MethodDecl(t,new Identifier(a.toString()),fl,vl,sl,e);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDeclList methodDeclL() throws ParseException {
  MethodDecl md; MethodDeclList mdl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      md = methodDecl();
      mdl = methodDeclL();
         mdl.addElement(md); {if (true) return mdl;}
      break;
    default:
      jj_la1[3] = jj_gen;
        {if (true) return new MethodDeclList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public FormalList formalL() throws ParseException {
 Formal f; FormalList fl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case INT:
    case INT_ARRAY:
    case ID:
      f = formal();
      fl = formalL2();
   fl.addElement(f); {if (true) return fl;}
      break;
    default:
      jj_la1[4] = jj_gen;
   {if (true) return new FormalList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public FormalList formalL2() throws ParseException {
 Formal f; FormalList fl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      f = formalR();
      fl = formalL2();
   fl.addElement(f);{if (true) return fl;}
      break;
    default:
      jj_la1[5] = jj_gen;
   {if (true) return new FormalList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Formal formal() throws ParseException {
 Type t; Token a;
    t = type();
    a = jj_consume_token(ID);
   {if (true) return new Formal(t,new Identifier(a.toString()));}
    throw new Error("Missing return statement in function");
  }

  static final public Formal formalR() throws ParseException {
 Type t; Token a;
    jj_consume_token(41);
    t = type();
    a = jj_consume_token(ID);
   {if (true) return new Formal(t,new Identifier(a.toString()));}
    throw new Error("Missing return statement in function");
  }

  static final public Type type() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_ARRAY:
      jj_consume_token(INT_ARRAY);
                 {if (true) return new IntArrayType();}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                           {if (true) return new BooleanType();}
      break;
    case ID:
      t = jj_consume_token(ID);
                 {if (true) return new IdentifierType(t.toString());}
      break;
    case INT:
      jj_consume_token(INT);
                 {if (true) return new IntegerType();}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public StatementList statementL() throws ParseException {
 Statement s; StatementList sl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case ID:
    case 35:
    case 42:
      s = statement();
      sl = statementL();
   sl.addElement(s); {if (true) return sl;}
      break;
    default:
      jj_la1[7] = jj_gen;
        {if (true) return new StatementList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement statement() throws ParseException {
 Statement s; Statement s2; StatementList sl; Exp e; Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
      jj_consume_token(35);
      sl = statementL();
      jj_consume_token(39);
   {if (true) return new Block(sl);}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(36);
      e = exp();
      jj_consume_token(38);
      s = statement();
      jj_consume_token(ELSE);
      s2 = statement();
   {if (true) return new If(e, s, s2);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(36);
      e = exp();
      jj_consume_token(38);
      s = statement();
   {if (true) return new While(e, s);}
      break;
    case 42:
      jj_consume_token(42);
      jj_consume_token(36);
      e = exp();
      jj_consume_token(38);
      jj_consume_token(40);
   {if (true) return new Print(e);}
      break;
    case ID:
      i = jj_consume_token(ID);
      s = statementPrime(new Identifier(i.toString()));
    {if (true) return s;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement statementPrime(Identifier i) throws ParseException {
 Exp e1; Exp e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      e1 = exp();
      jj_consume_token(40);
    {if (true) return new Assign(i, e1);}
      break;
    case 44:
      jj_consume_token(44);
      e1 = exp();
      jj_consume_token(45);
      jj_consume_token(43);
      e2 = exp();
      jj_consume_token(40);
    {if (true) return new ArrayAssign(i,e1,e2);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp exp() throws ParseException {
 Exp e1; Exp e2;
    e1 = TP();
    e2 = TPrime(e1);
   {if (true) return e2;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp TP() throws ParseException {
 Token s; Exp e; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      s = jj_consume_token(INTEGER_LITERAL);
                       {if (true) return new IntegerLiteral(Integer.parseInt(s.toString()));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
          {if (true) return new True();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
           {if (true) return new False();}
      break;
    case ID:
      t = jj_consume_token(ID);
            {if (true) return new IdentifierExp(t.toString());}
      break;
    case THIS:
      jj_consume_token(THIS);
          {if (true) return new This();}
      break;
    case NEW:
      jj_consume_token(NEW);
      e = A();
               {if (true) return e;}
      break;
    case 46:
      jj_consume_token(46);
      e = exp();
               {if (true) return new Not(e);}
      break;
    case 36:
      jj_consume_token(36);
      e = exp();
      jj_consume_token(38);
                    {if (true) return e;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp A() throws ParseException {
 Exp e;Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      jj_consume_token(44);
      e = exp();
      jj_consume_token(45);
                           {if (true) return new NewArray(e);}
      break;
    case ID:
      t = jj_consume_token(ID);
      jj_consume_token(36);
      jj_consume_token(38);
                      {if (true) return new NewObject(new Identifier(t.toString()));}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp TPrime(Exp e1) throws ParseException {
 Exp e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      e2 = exp();
                 {if (true) return new Plus(e1,e2);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      e2 = exp();
                 {if (true) return new Minus(e1,e2);}
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      e2 = exp();
                 {if (true) return new Times(e1,e2);}
      break;
    case LESSTHAN:
      jj_consume_token(LESSTHAN);
      e2 = exp();
                 {if (true) return new LessThan(e1,e2);}
      break;
    case AND:
      jj_consume_token(AND);
      e2 = exp();
                 {if (true) return new And(e1,e2);}
      break;
    case 44:
      jj_consume_token(44);
      e2 = exp();
      jj_consume_token(45);
                     {if (true) return new ArrayLookup(e1,e2);}
      break;
    case 47:
      jj_consume_token(47);
      e2 = E(e1);
                  {if (true) return e2;}
      break;
    default:
      jj_la1[12] = jj_gen;
    {if (true) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp E(Exp exp) throws ParseException {
 ExpList el; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGTH:
      jj_consume_token(LENGTH);
            {if (true) return new ArrayLength(exp);}
      break;
    case ID:
      t = jj_consume_token(ID);
      jj_consume_token(36);
      el = expL();
      jj_consume_token(38);
                              {if (true) return new Call(exp,new Identifier(t.toString()),el);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpList expL() throws ParseException {
 Exp e; ExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case THIS:
    case TRUE:
    case ID:
    case INTEGER_LITERAL:
    case 36:
    case 46:
      e = exp();
      el = expL2();
   el.addElement(e); {if (true) return el;}
      break;
    default:
      jj_la1[14] = jj_gen;
   {if (true) return new ExpList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpList expL2() throws ParseException {
 Exp e; ExpList el;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      e = expR();
      el = expL2();
   el.addElement(e); {if (true) return el;}
      break;
    default:
      jj_la1[15] = jj_gen;
   {if (true) return new ExpList();}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp expR() throws ParseException {
 Exp e;
    jj_consume_token(41);
    e = exp();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x2000,0x40030400,0x200000,0x40030400,0x0,0x40030400,0x50008000,0x50008000,0x0,0xc6104000,0x40010000,0x3e0,0x40040000,0xc6104000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x8,0x0,0x0,0x0,0x200,0x0,0x408,0x408,0x1800,0x4010,0x0,0x9000,0x0,0x4010,0x200,};
   }

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

 }
